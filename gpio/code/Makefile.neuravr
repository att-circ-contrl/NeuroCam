# Attention Circuits Control Laboratory - GPIO device
# Makefile.
# Written by Christopher Thomas.

#
# Configuration.

# Source files.

HDRS=	\
	ncam_gpio_config.h	\
	ncam_gpio_dio.h		\
	ncam_gpio_host.h	\
	ncam_gpio_includes.h	\
	ncam_gpio_task.h	\
	ncam_gpio_timer.h

SRCS=	\
	ncam_gpio.cpp		\
	ncam_gpio_dio.cpp	\
	ncam_gpio_host.cpp	\
	ncam_gpio_task.cpp	\
	ncam_gpio_timer.cpp

# Target name.
BIN=ncam_gpio


# Compiler flags.
CFLAGS=-Os -fno-exceptions	\
	-Ineuravr/include -Lneuravr/lib	\
	-D__AVR_ATmega328P__ -mmcu=atmega328p

# Linking has to be done after compiling, so this is a separate variable.
LFLAGS=-lneur-m328p


#
# Targets.

default: helpscreen

helpscreen:
	@echo ""
	@echo "Targets:   clean  hex  burnisp  burnard  test"
	@echo ""

elf: $(BIN).elf
hex: $(BIN).hex hexcopy
asm: $(BIN).asm

clean:
	rm -f $(BIN).elf
	rm -f $(BIN).hex
	rm -f $(BIN).asm

$(BIN).hex: $(BIN).elf
	avr-objcopy -j .text -j .data -O ihex $(BIN).elf $(BIN).hex

hexcopy: $(BIN).hex
	rm -f hexfiles/$(BIN).hex
	cp $(BIN).hex hexfiles/

$(BIN).elf: $(SRCS) $(HDRS)
	avr-gcc $(CFLAGS) -o $(BIN).elf $(SRCS) $(LFLAGS)

$(BIN).asm: $(BIN).elf
	avr-objdump -d $(BIN).elf > $(BIN).asm

# This looks for an Atmel AVR ISP Mk 2.
burnisp: $(BIN).hex
	avrdude -c avrispv2 -P usb -p m328p -U flash:w:$(BIN).hex

# This looks for a boot loader (pretending to be a stk500).
# FIXME - This blithely assumes we're on the first USB serial device and
# are using Linux Mint 18's naming conventions.
# NOTE - We need "-D" to cancel flash erase, as the boot loader refuses to
# erase itself.
burnard: $(BIN).hex
	avrdude -c stk500 -P /dev/ttyACM0 -p m328p -D -U flash:w:$(BIN).hex

# FIXME - Setting the lock bits requires performing a chip erase!
# FIXME - Fuse settings are 2.7v brownout (needed for EEPROM),
# minimum boot loader size, boot from 0x0000 (not the boot loader),
# keep EEPROM during chip erase, external crystal, full swing, max
# startup delay, everything unlocked.
# FIXME - These are not Arduino-safe settings.
# NOTE - Only the least significant 3 bits of efuse are valid. The rest are 1.
fuses:
	avrdude -c avrispv2 -P usb -p m328p -B 20 -e -u -U lock:w:0x3f:m
	avrdude -c avrispv2 -P usb -p m328p -B 20 -u -U efuse:w:0x05:m
	avrdude -c avrispv2 -P usb -p m328p -B 20 -u -U hfuse:w:0xd7:m
	avrdude -c avrispv2 -P usb -p m328p -B 20 -u -U lfuse:w:0xf7:m
	avrdude -c avrispv2 -P usb -p m328p -B 1 -u -U lock:w:0x3f:m

# FIXME - Nominally arduino-stock, but difficult to test.
# These were snooped from an Arduino Uno with a new (ATmega32U4) serial
# translator.
# NOTE - Only the least significant 3 bits of efuse are valid. The rest are 1.
# 0x05 read means 0xfd written.
ardfuses:
	avrdude -c avrispv2 -P usb -p m328p -B 20 -e -u -U lock:w:0x0f:m
	avrdude -c avrispv2 -P usb -p m328p -B 20 -u -U efuse:w:0x05:m
	avrdude -c avrispv2 -P usb -p m328p -B 20 -u -U hfuse:w:0xd6:m
	avrdude -c avrispv2 -P usb -p m328p -B 20 -u -U lfuse:w:0xff:m
	avrdude -c avrispv2 -P usb -p m328p -B 1 -u -U lock:w:0x0f:m

# Using "cu -h" for manual echo.
# FIXME - With the Nano, this is /dev/ttyUSB0, not ACM0.
test:
	cu -h -l /dev/ttyACM0 -s 115200


#
# This is the end of the file.
